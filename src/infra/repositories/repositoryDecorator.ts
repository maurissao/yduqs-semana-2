import "reflect-metadata";
import { IBaseModel } from "../../model/baseModel";
import { Store } from "../store";
import { ValidatorConstraint, ValidatorConstraintInterface, ValidationArguments } from "class-validator";

export function model(Model: IBaseModel) {
    return function (target: any) {
        Reflect.defineMetadata('modelName', Model, target);
    }
}

@ValidatorConstraint({name: 'checkConstraint', async: false})
export class CheckConstraint implements ValidatorConstraintInterface {
    validate(value: any, validationArguments?: ValidationArguments): boolean | Promise<boolean> {
        const state: typeof validationArguments.object[] = Store.Instance.GetData(validationArguments.targetName);        
        return state.filter(e => e[validationArguments.property] === value).length === 0;
    }

    defaultMessage(validationArguments?: ValidationArguments): string {
        return 'validação de chave unica'
    }
}

@ValidatorConstraint({name: 'uniqueConstraint', async: false})
export class UniqueConstraint implements ValidatorConstraintInterface {
    validate(value: any, validationArguments?: ValidationArguments): boolean | Promise<boolean> {
        const state: typeof validationArguments.object[] = Store.Instance.GetData(validationArguments.targetName);
        return state.filter(e => e[validationArguments.property] === value).length === 0;
    }

    defaultMessage(validationArguments?: ValidationArguments): string {
        return 'validação de chave unica'
    }
}

export const CheckConstraintFK = function(table: string, key: string) {
    return function (target: Object, propertyKey: string | symbol) {
        const cc: any[] = Reflect.getMetadata('CheckConstraintFK', target.constructor) || [];
        cc.push({key: propertyKey,
            table,
            fk: key
        });
        Reflect.defineMetadata('CheckConstraintFK', cc, target.constructor);
    }
}

export const IsAutoGeneratedID = function() {
    return function (target: Object, propertyKey: string | symbol) {
        Reflect.defineMetadata('AutoGeneratedID', propertyKey, target.constructor);
    }
}
